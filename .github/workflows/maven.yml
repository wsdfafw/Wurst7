name: build
on: [pull_request, push]

jobs:
  build:
    strategy:
      matrix:
        # 使用这些Java版本
        java: [
          17
        ]
        # 并同时在Linux和Windows上运行
        os: [ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v2
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: make gradle wrapper executable
        if: ${{ runner.os != 'Windows' }}
        run: chmod +x ./gradlew
      - name: build
        run: ./gradlew build
      - name: capture build artifacts
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }} # 只上传由一个操作系统上的LTS java构建的工件
        uses: actions/upload-artifact@v2
        with:
          name: Artifacts
          path: build/libs/Wurst-Client-*-sources.jar
          
  releaseDraft:
    name: 发行草案
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:

      # 查看当前存储库
      - name: 获取来源
        uses: actions/checkout@v2.4.0

      # 通过使用curl请求删除带有草案标志的可用版本的旧版本草案。
      - name: 删除旧的发行草案
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | select(.target_commitish=="${{ needs.build.outputs.target }}") | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}
      # 创建新的发布草案--不公开可见，需要人工接受
      - name: 创建释放草案
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"