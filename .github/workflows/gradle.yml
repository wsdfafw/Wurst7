name: Java CI with Gradle

on:
  push:
    paths:
      - "**.java"
      - "**.json"
      - "gradle**"
      - "*.gradle"
  pull_request:
    paths:
      - "**.java"
      - "**.json"
      - "gradle**"
      - "*.gradle"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
      IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
    steps:

    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 设置Java 21
      uses: actions/setup-java@v4
      with:
        java-version: "21"
        distribution: "microsoft"

    - name: 授予gradlew执行权限
      run: chmod +x gradlew

    - name: 使用Spotless修复代码
      id: spotless_Apply
      run: ./gradlew :spotlessApply
      env:
        SPOTLESS_SKIP: ${{ github.event_name == 'pull_request' }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        build-scan-publish: true
        build-scan-terms-of-use-url: "https://gradle.com/help/legal-terms-of-use"
        build-scan-terms-of-use-agree: "yes"

    - name: 编译Java代码
      run: ./gradlew remapJar --stacktrace --warning-mode=fail

    - name: 验证JSON文件
      run: ./gradlew spotlessJsonCheck || (echo "::error::JSON验证失败！运行'./gradlew spotlessApply'修复样式问题，或检查完整错误消息以查找语法错误。" && exit 1)

    - name: 验证Java代码风格
      run: ./gradlew spotlessCheck || (echo "::error::Java代码风格验证失败！要修复，请在Eclipse中运行'Clean Up'和'Format'，或在终端中运行'./gradlew spotlessApply'。" && exit 1)

    - name: 运行单元测试
      run: ./gradlew test --stacktrace --warning-mode=fail

    - name: 验证访问 widener
      run: ./gradlew validateAccessWidener --stacktrace --warning-mode=fail

    - name: 构建
      run: ./gradlew build --stacktrace --warning-mode=fail

    - name: VirusTotal扫描
      id: virustotal
      if: ${{ env.VIRUSTOTAL_API_KEY }}
      uses: crazy-max/ghaction-virustotal@v4
      with:
        vt_api_key: ${{ env.VIRUSTOTAL_API_KEY }}
        files: |
          ./build/libs/*.jar
      # 此步骤中的错误表示上传失败，而不是检测到假阳性。
      continue-on-error: true

    - name: 将VirusTotal链接添加到构建摘要
      if: ${{ env.VIRUSTOTAL_API_KEY && steps.virustotal.outputs.analysis }}
      shell: bash
      run: |
        echo "<details open>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>🛡️ VirusTotal扫描</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        IFS=',' read -ra ANALYSIS <<< "${{ steps.virustotal.outputs.analysis }}"
        for i in "${ANALYSIS[@]}"; do
          filepath=${i%%=*}
          url=${i#*=}
          filename=$(basename "$filepath")
          echo "- [$filename]($url)" >> $GITHUB_STEP_SUMMARY
        done
        echo "</details>" >> $GITHUB_STEP_SUMMARY

    - name: 运行模组并截图
      uses: modmuss50/xvfb-action@c56c7da0c8fc9a7cb5df2e50dd2a43a80b64c5cb
      with:
        run: ./gradlew runEndToEndTest --stacktrace --warning-mode=fail

    # 需要此步骤，因为截图库在pull请求上不会创建。
    # 如果Imgur上传失败，此步骤也很有用。
    - name: 上传Test Screenshots.zip构件
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: Test Screenshots
        path: run/screenshots

    - name: 创建测试截图图库
      if: ${{ env.IMGUR_CLIENT_ID && (success() || failure()) }}
      shell: bash
      run: |
        echo "<details open>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>📸 测试截图</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        for img in run/screenshots/*.png; do
          if [ -f "$img" ]; then
            filename=$(basename "$img")
            name_without_ext="${filename%.*}"

            # 上传到Imgur
            response=$(curl -s -X POST \
              -H "Authorization: Client-ID $IMGUR_CLIENT_ID" \
              -F "image=@$img" \
              https://api.imgur.com/3/image)

            # 从响应中提取URL
            url=$(echo $response | grep -o '"link":"[^"]*"' | cut -d'"' -f4)

            if [ ! -z "$url" ]; then
              # 将下划线转换为空格，并将每个单词的首字母大写
              title=$(echo "$name_without_ext" | tr '_' ' ' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')
              echo "### $title" >> $GITHUB_STEP_SUMMARY
              echo "![${name_without_ext}]($url)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            else
              echo "Failed to upload $filename" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done
        echo "</details>" >> $GITHUB_STEP_SUMMARY

    - name: 捕获构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Artifacts
        path: build/libs/Wurst-Client-*.jar

    - name: 自动发布
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
      uses: marvinpinto/action-automatic-releases@v1.2.1
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "java"
        prerelease: true
        title: "自动构建版本"
        files: |
          build/libs/Wurst-Client-*.jar
